//! Agent logic and data structures
// All legacy agent logic has been removed. Only AgentType is retained for ECS agent spawning.

use serde::Deserialize;
use std::collections::HashMap;
use crate::terrain::types::TerrainType;

#[derive(Debug, Clone, Deserialize)]
pub struct AgentType {
    pub r#type: String,
    pub color: String,
    pub move_speed: f32,
    pub strength: i32,
    pub stamina: i32,
    pub vision: i32,
    pub work_rate: i32,
    pub icon: String,
    pub damping: Option<f32>,
    pub move_probability: Option<f32>, // Probability to move each tick (0.0-1.0)
    pub movement_profile: MovementProfile,
}

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum MovementEffect {
    Normal,
    Slow(f32),    // Cost multiplier (e.g., 2.0 = double cost)
    Impassable,
}

#[derive(Clone, Debug)]
pub struct MovementProfile {
    pub terrain_effects: HashMap<TerrainType, MovementEffect>,
}

impl MovementProfile {
    pub fn movement_effect_for(&self, terrain: TerrainType) -> MovementEffect {
        self.terrain_effects.get(&terrain).copied().unwrap_or(MovementEffect::Normal)
    }
}
